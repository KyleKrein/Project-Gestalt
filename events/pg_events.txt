namespace = pg

# Project Gestalt
country_event = {
	id = pg.1
	title = "pg.1.name"
	desc = "pg.1.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	option = {
		name = "pg.1.a"
		capital_scope = {
			enable_special_project = {
				name = "PROJECT_GESTALT"
				location = this
				owner = root
			}
		}
	}
}
# Energy Age
country_event = {
	id = pg.2
	title = "pg.2.name"
	desc = "pg.2.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	immediate = {
		set_country_flag = energetic_creatures
		set_country_flag = energy_age
			give_technology = {
				tech = tech_gestalt_mod message = no
			}
        

		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "GESTALT"
			portrait = "unbidden_blue"
			traits = {
				trait = "trait_gestalt"
			}
			effect = {
				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
				save_event_target_as = pg_species
			}
		}

		every_owned_pop = {
			limit = {
				species = {
					OR = {
						has_trait = trait_psionic
						has_trait = trait_latent_psionic
					}
				}
			}
			change_species = event_target:pg_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					OR = {
						has_trait = trait_psionic
						has_trait = trait_latent_psionic
					}
				}
			}
			change_species = event_target:pg_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					OR = {
						has_trait = trait_psionic
						has_trait = trait_latent_psionic
					}
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "gestalt_army"
				species = event_target:pg_species
				}
			}
		

		every_owned_leader = {
			change_species = event_target:pg_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			change_species = event_target:pg_species
			change_leader_portrait = species
		}
		change_dominant_species = {
			species = event_target:pg_species
		}

		every_owned_leader = {
			limit = {
				is_same_species = root
				#species = {
				#	has_trait = trait_psionic
				#	is_same_value = event_target:psionic_species
				#}
			}
			if = {
				limit = { leader_class = admiral }
				remove_ruler_trait = leader_trait_admiral_psionic
				if = {
					limit = { leader = { NOT = { has_trait = leader_trait_admiral_chosen } } }
					add_trait = leader_trait_admiral_psionic
				}
				add_trait = leader_trait_admiral_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = general }
				remove_ruler_trait = leader_trait_general_psionic
				if = {
					limit = { leader = { NOT = { has_trait = leader_trait_general_chosen } } }
					add_trait = leader_trait_general_psionic
				}
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = governor }
				remove_ruler_trait = leader_trait_governor_psionic
				if = {
					limit = { leader = { NOT = { has_trait = leader_trait_governor_chosen } } }
					add_trait = leader_trait_governor_psionic
				}
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = scientist }
				remove_ruler_trait = leader_trait_scientist_psionic
				if = {
					limit = { leader = { NOT = { has_trait = leader_trait_scientist_chosen } } }
					add_trait = leader_trait_scientist_psionic
				}
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = ruler }
				remove_ruler_trait = leader_trait_ruler_psionic
				add_trait = leader_trait_ruler_gestalt
				add_ruler_trait = leader_trait_ruler_gestalt
			}
		}
		every_pool_leader = {
			limit = {
				is_same_species = root
				#species = {
				#	has_trait = trait_psionic
				#	is_same_value = event_target:psionic_species
				#}
			}
			if = {
				limit = { leader_class = admiral }
				remove_ruler_trait = leader_trait_admiral_psionic
				add_trait = leader_trait_admiral_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = general }
				remove_ruler_trait = leader_trait_general_psionic
				add_trait = leader_trait_general_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = governor }
				remove_ruler_trait = leader_trait_governor_psionic
				add_trait = leader_trait_governor_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = scientist }
				remove_ruler_trait = leader_trait_scientist_psionic
				add_trait = leader_trait_scientist_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
			}
			if = {
				limit = { leader_class = ruler }
				remove_ruler_trait = leader_trait_ruler_psionic
				add_trait = leader_trait_ruler_gestalt
				add_ruler_trait = leader_trait_ruler_gestalt
			} 
		}
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = pg.10 days = 5 }
		}
	}
}

# Ascension For Soul Eaters
country_event = {
	id = pg.3
	title = "pg.3.name"
	desc = "pg.3.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	immediate = {
		set_country_flag = energetic_creatures
		set_country_flag = ascended_soul_eaters
			give_technology = {
				tech = tech_gestalt_mod message = no
			}
     

		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "GESTALTSE"
			portrait = "unbidden_red"
			traits = {
				trait = "trait_corrupted"
				trait = "trait_vb_psi_soul_eater"
			}
			effect = {
				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}
				save_event_target_as = new_corrupted_species
			}
		}

		every_owned_pop = {
			limit = {
				species = {
				    has_trait = trait_vb_psi_soul_eater
				}
			}
			change_species = event_target:new_corrupted_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
				    has_trait = trait_vb_psi_soul_eater
				}
			}
			change_species = event_target:new_corrupted_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
				    has_trait = trait_vb_psi_soul_eater
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "gestalt_army"
				species = event_target:new_corrupted_species
				}
			}
		

		every_owned_leader = {
			change_species = event_target:new_corrupted_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			change_species = event_target:new_corrupted_species
			change_leader_portrait = species
		}
		change_dominant_species = {
			species = event_target:new_corrupted_species
		}
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = pg.11 days = 5 }
		}
#		every_owned_pop_species = {
#			limit = {
#					AND= {
#						has_trait =  trait_corrupted
#						has_trait = trait_vb_psi_soul_eater
#							}
#			}
#			set_citizenship_type = {
#				country = root
#				species = this
#				type = citizenship_full
#				cooldown = no
#			}
#		}
	}       	
}

#Contact with The Stranger
#country_event = {
#	id = pg.6
#	title = "pg.6.name"
#	desc = "pg.6.desc"
#	diplomatic = yes
#	force_open = yes
#	
#	picture_event_data = {
#		portrait = shroud1
#		room = shroud_room
#	}
#	
#	is_triggered_only = yes
#
#	immediate = {
#		set_country_flag = shroud_diplomacy_engaged
#	}
#	
#	after = {
#		hidden_effect = {
#			remove_country_flag = shroud_diplomacy_engaged
#		}
#	}
#	
#	option = {
#		name = "pg.6.a"
#		custom_tooltip = "stranger.y.tooltip"
#		add_modifier = { modifier = stranger_present days = 1200 }
#		hidden_effect = {
#			set_country_flag = soul_eaters
#		    change_government = { civic = civic_vb_psi_soul_eater }
#			country_event = { id = vortex.2 } 
#			every_owned_pop = {
#				limit = {
#					species = { NOT = { has_trait = trait_mechanical }}
#				}
#				modify_species = {
#					species = this
#					add_trait = trait_vb_psi_soul_eater
#				}
#			}
#				set_variable = {
#					which = vb_psi_food value = @staring_food
#				}
#				vb_psi_calculate_sustenance = yes	
#				country_event = { id = vb_psi_souleater.4 }
#				set_country_flag = shroud_diplomacy_engaged
#			}
#		}
#	option = {
#		name = "exit.vortex"
#		custom_tooltip = "exit.vortex.tooltip"
#		default_hide_option = yes
#	}
#}

#Single Mind 2.0
country_event = {
	id = pg.4
	title = "pg.4.name"
	desc = "pg.4.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_laboratory_sound
	
	is_triggered_only = yes
	
	immediate = {
		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
				trait = "trait_singlemind"
			}
			
			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
				prev = {
					switch = {
						trigger = species_portrait
						sd_art_robot = { PREV = { change_species_characteristics = { portrait = sd_art_robot } } }
						sd_avi_robot = { PREV = { change_species_characteristics = { portrait = sd_avi_robot } } }
						sd_fun_robot = { PREV = { change_species_characteristics = { portrait = sd_fun_robot } } }
						sd_hum_robot = { PREV = { change_species_characteristics = { portrait = sd_hum_robot } } }
						sd_mam_robot = { PREV = { change_species_characteristics = { portrait = sd_mam_robot } } }
						sd_mol_robot = { PREV = { change_species_characteristics = { portrait = sd_mol_robot } } }
						sd_pla_robot = { PREV = { change_species_characteristics = { portrait = sd_pla_robot } } }
						sd_rep_robot = { PREV = { change_species_characteristics = { portrait = sd_rep_robot } } }
						}
					}
				}
				
				save_event_target_as = new_single_mind_species
			}
		}
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_mechanical 
				}
			}
			change_species = event_target:new_single_mind_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_mechanical
				}
			}
			change_species = event_target:new_single_mind_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = robotic_army
			}
			modify_army = {
				name = random
				type = "machine_assault_1"
				species = event_target:new_single_mind_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_mechanical
				}
				army_type = robotic_defense_army
			}
			modify_army = {
				name = random
				type = "machine_defense"
				species = event_target:new_single_mind_species
			}
		}
	}
	
	option = {
		name = "pg.4.a"
	#	hidden_effect = {
	#		country_remove_ethic = ethic_fanatic_authoritarian
	#		country_remove_ethic = ethic_authoritarian
	#		country_remove_ethic = ethic_fanatic_egalitarian
	#		country_remove_ethic = ethic_egalitarian
	#		country_remove_ethic = ethic_fanatic_xenophobe
	#		country_remove_ethic = ethic_xenophobe
	#		country_remove_ethic = ethic_fanatic_xenophile
	#		country_remove_ethic = ethic_xenophile
	#		country_remove_ethic = ethic_fanatic_militarist
	#		country_remove_ethic = ethic_militarist
	#		country_remove_ethic = ethic_fanatic_pacifist
	#		country_remove_ethic = ethic_pacifist	
	#		country_remove_ethic = ethic_fanatic_spiritualist
	#		country_remove_ethic = ethic_spiritualist
	#		country_remove_ethic = ethic_fanatic_materialist
	#		country_remove_ethic = ethic_materialist

	#		country_add_ethic = ethic_gestalt_consciousness
	#		change_government = {
	#			authority = auth_machine_intelligence
	#			civics = {
	#				civic = civic_machine_unitary_cohesion
	#				civic = civic_machine_zero_waste_protocols
	#			}
	#		}
	#		every_owned_planet = {
	#			if = {
	#				limit = { has_building = building_colony_shelter }
	#				remove_building = building_colony_shelter
	#				add_building = building_deployment_post
	#			}
	#			else = {}
	#			if = {
	#				limit = { has_building = building_capital }
	#				remove_building = building_capital
	#				add_building = building_machine_capital
	#			}
	#			else = {}
	#			if = {
	#				limit = { has_building = building_major_capital }
	#				remove_building = building_major_capital
	#				add_building = building_machine_major_capital
	#			}
	#			else = {}
	#			if = {
	#				limit = { has_building = building_system_capital }
	#				remove_building = building_system_capital
	#				add_building = building_machine_system_capital
	#			}
	#			else = {}
	#		}
	#		create_leader = {
	#					class = ruler
	#					species = this
	#					skill = 10
	#					traits = {
	#						trait = leader_trait_ruler_machine_intelligence
	#			}
	#		}
	#		assign_leader = last_created_leader
	#	}
	}
}

#Psionic Hive Mind
#country_event = {
#	id = pg.7
#	title = "pg.7.name"
#	desc = "pg.7.desc"
#	picture = GFX_evt_psionics
#	show_sound = event_the_great_awakening
#	
#	is_triggered_only = yes
#
#	immediate = {
#		modify_species = {
#			species = this
#			add_trait = trait_hive_mind
#		}
#	}
#	
#	option = {
#		name = "pg.7.a"
#		hidden_effect = {
#			country_remove_ethic = ethic_fanatic_authoritarian
#			country_remove_ethic = ethic_authoritarian
#			country_remove_ethic = ethic_fanatic_egalitarian
#			country_remove_ethic = ethic_egalitarian
#			country_remove_ethic = ethic_fanatic_xenophobe
#			country_remove_ethic = ethic_xenophobe
#			country_remove_ethic = ethic_fanatic_xenophile
#			country_remove_ethic = ethic_xenophile
#			country_remove_ethic = ethic_fanatic_militarist
#			country_remove_ethic = ethic_militarist
#			country_remove_ethic = ethic_fanatic_pacifist
#			country_remove_ethic = ethic_pacifist	
#			country_remove_ethic = ethic_fanatic_spiritualist
#			country_remove_ethic = ethic_spiritualist
#			country_remove_ethic = ethic_fanatic_materialist
#			country_remove_ethic = ethic_materialist
#
#			country_add_ethic = ethic_gestalt_consciousness
#			change_government = {
#				authority = auth_hive_mind
#				civics = {
#					civic = civic_hive_subspace_ephapse
#					civic = civic_hive_one_mind
#				}
#			}
#			every_owned_planet = {
#				if = {
#					limit = { has_building = building_capital }
#					remove_building = building_capital
#					add_building = building_hive_capital
#				}
#				else = {}
#				if = {
#					limit = { has_building = building_major_capital }
#					remove_building = building_major_capital
#					add_building = building_hive_major_capital
#				}
#				else = {}
#			}
#			create_leader = {
#				class = ruler
#				species = owner_main_species
#				skill = 10
#				traits = { 
#					trait = leader_trait_ruler_hive_mind 
#					trait = leader_trait_ruler_chosen
#				}
#			}
#			assign_leader = last_created_leader
#		}
#	}
#}

country_event = {
	id = pg.9
	title = "pg.9.name"
	desc = "pg.9.desc"
	picture = GFX_evt_genetic_modification
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	option = {
		name = "pg.9.a"
		capital_scope = {
			enable_special_project = {
				name = "GENE_OF_PERFECTION"
				location = this
				owner = root
			}
		}
	}
}

country_event = {
	id = pg.8
	title = "pg.8.name"
	desc = "pg.8.desc"
	picture = GFX_evt_genetic_modification
	show_sound = event_evolution_mastery

	is_triggered_only = yes

	immediate = {	
		give_technology = {
			tech = tech_pg_perfect message = no
		}
		modify_species = {
			species = THIS
			add_trait = trait_perfect_creature
		}
		
	}
}

#Gene-modified Psionics
#country_event = {
#	id = pg.5
#	title = "pg.5.name"
#	desc = "pg.5.desc"
#	picture = GFX_evt_psionics
#	show_sound = event_the_great_awakening

#	is_triggered_only = yes

	
#}

# Notification for other empires normal Energy
country_event = {
	id = pg.10
	title = "pg.10.name"
	desc = "pg.10.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	option = {
		name = AMAZING
	}
}

# Notification for other empires Soul Eaters
country_event = {
	id = pg.11
	title = "pg.11.name"
	desc = "pg.11.desc"
	picture = GFX_evt_psionics
	show_sound = event_the_great_awakening

	is_triggered_only = yes

	option = {
		name = PG_TERRIBLE
	}
}

# New Leaders Get Gestalt Trait
country_event = {
	id = pg.12
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			species = { has_trait = trait_gestalt }
		}
	}

	immediate = {
		from = {
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
				break = yes
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
				break = yes
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
				break = yes
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_psionic
				add_ruler_trait = leader_trait_ruler_gestalt
				break = yes
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_gestalt
				add_ruler_trait = leader_trait_ruler_gestalt
				break = yes
			}
		}
	}
}

country_event = {
	id = pg.13
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		from = {
			OR = {
				species = { has_trait = trait_gestalt }
				has_ruler_trait = leader_trait_ruler_gestalt
			}
			NOR = {
				has_trait = leader_trait_admiral_psionic
				has_trait = leader_trait_general_psionic
				has_trait = leader_trait_governor_psionic
				has_trait = leader_trait_scientist_psionic
				has_trait = leader_trait_admiral_chosen
				has_trait = leader_trait_general_chosen
				has_trait = leader_trait_governor_chosen
				has_trait = leader_trait_scientist_chosen
			}
		}
	}

	immediate = {
		from = {
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_psionic
				break = yes
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_psionic
				break = yes
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_psionic
				break = yes
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_psionic
				break = yes
			}
		}
	}
}

#Moon start init
country_event = {
	id = pg.14
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_origin = origin_pg_moon_start
	}

	immediate = {
		capital_scope.solar_system = {
			random_system_planet = {
				limit = {
					is_asteroid = no
					is_star = no
					habitable_planet = no
					not = {
						exists = owner
					}
				}
				pg_change_pc_to_almost_normal = yes
				generate_start_buildings_and_districts = yes
				
				set_owner = root
				save_event_target_as = pg_new_colony
				while = {
					limit = {
						planet_size > 20
					}
					change_planet_size = -1
				}
				while = {
					limit = {
						planet_size < 14
					}
					change_planet_size = 1
				}
				reroll_planet = yes
				create_colony = {
					owner = root
				}
				while = {
					count = 16
					create_pop = {
						species = owner_main_species
					}
				}
				while = {
					count = 2
					add_district = {
						district_type = district_city
						ignore_cap = yes
					}
					add_district = {
						district_type = district_generator
						ignore_cap = yes
					}
					add_district = {
						district_type = district_mining
						ignore_cap = yes
					}
					add_district = {
						district_type = district_farming
						ignore_cap = yes
					}
				}
				add_building = building_hydroponics_farm
				remove_building = building_colony_shelter
				add_building = building_capital
			}
			root = {
				set_country_flag = custom_start_screen
				add_resource = {
					minerals = 300
					energy = 300
					food = 300
					influence = 100
				}
			capital_scope = {
				change_pc = pc_nuked
				
				save_event_target_as = pg_old_home
			}
			event_target:pg_new_colony = {
				set_capital = yes
			}
			event_target:pg_old_home = {
				pg_destroy_buildings_and_colony = yes
				prevent_anomaly = yes
				clear_deposits = yes
				relic_world_deposits = yes
				create_archaeological_site = pg_old_world_site
			}
		}
		}
	}
}

#Starting special project when colonizing old home
#country_event = {
#	id = pg.15
#	title = "pg.15.name"
#	desc = "pg.15.desc"
#	picture = GFX_evt_city_ruins
#	show_sound = event_wind_ruins

#	is_triggered_only = yes
	
#	trigger = {
#		planet = { has_planet_flag = pg_old_home }
#		root = { has_origin = origin_pg_moon_start }
#	}
#	option = {
#		name = "pg.9.a"
#		event_target:pg_old_home = {
#			enable_special_project = {
#				name = "PG_OLD_HOME"
#				location = this
#				owner = root
#			}
#		}
#	}
#}

#country_event = {
#	id = pg.16
#	title = "pg.16.name"
#	desc = "pg.16.desc"
#	picture = GFX_evt_city_ruins
#	show_sound = event_wind_ruins

#	is_triggered_only = yes

#	immediate = {
#		planet = {
#			add_modifier = {
#				modifier = pg_old_home
#			}
#		}
#	}
#}

# The Ark colonizes the planet
planet_event = {
	id = pg.15
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = owner
		owner = {
			is_country_type = pg_last_hope
		}
	}

	immediate = {
		owner = {
			if = {
				limit = { has_country_flag = pg_country_type_default }
				set_country_type = default
				remove_country_flag = pg_country_type_default
			}
			if = {
				limit = { has_country_flag = pg_country_type_ascended }
				set_country_type = ascended_empire
				remove_country_flag = pg_country_type_ascended
			}
			if = {
				limit = { has_country_flag = pg_country_type_lost }
				set_country_type = lost_empire
				remove_country_flag = pg_country_type_lost
			}
			else = {
				set_country_type = default
			}
			remove_modifier = pg_the_ark
			add_modifier = { modifier = pg_the_new_hope }
			while = {
				limit = {
					check_variable = {
						which = pg_the_ark_pops
						value > 0
					}
				}
				change_variable = {
					which = pg_the_ark_pops
					value = -1
				}
				root = {
					create_pop = {
						species = root.owner
					}
				}
			}
			add_resource = {
				minerals = 200
				energy = 200
			}
		}
		if = {
			limit = {
				root = {
					NOR = {
						is_planet_class = pc_city
						is_planet_class = pc_ringworld_habitable
						is_planet_class = pc_cybrex
						is_planet_class = pc_habitat
						is_planet_class = pc_machine
					}
				}
			}
			generate_start_buildings_and_districts = yes
			add_district = district_city
		}
		else = {
		owner = {
			add_resource = {
				minerals = 800
				energy = 800
				alloys = 150
				food = 200
				}
			}
		}
		set_capital = yes
	}
}


